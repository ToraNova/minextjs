{"version":3,"file":"static/webpack/static/development/pages/profile.js.331e2994283fec9a146f.hot-update.js","sources":["webpack:///./utils/authser.js"],"sourcesContent":["/*\n * This is a helper utility that allows\n * authentication for pages\n * This is reusable across pages\n * The JWT token is stored as cookies\n */\n\n//redundant but this allows me to explicitly know fetch is from this package\nimport fetch from 'isomorphic-unfetch'\n\n//This class can be used as a service handler for login pages\n//or any form of authentication\nexport default class AuthService {\n\t//if domain is passed, then use that else fallback to localhost:5000\n\tconstructor(domain) {\n\t\tthis.domain = domain || 'http://localhost:1996'\n\t\tthis.fetch = this.fetch.bind(this)\n\t\tthis.login = this.login.bind(this)\n\t\tthis.getProfile = this.getProfile.bind(this)\n\t}\n\n\t//signup a user\n\tsignUp(email, name, password){\n\t\treturn this.fetch(`${this.domain}/user/add`, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({\n\t\t\temail,\n\t\t\tname,\n\t\t\tpassword\n\t\t})\n\t\t}).then(res => {\n\t\t\tthis.setToken(res.token) //arms the token\n\t\t\treturn this.fetch(`${this.domain}/user/profile`, {\n\t\t\tmethod: 'GET'\n\t\t})\n\t\t}).then(res => {\n\t\t\tthis.setProfile(res)\n\t\t\treturn Promise.resolve(res)\n\t\t})\n\t}\n\n\t// Get a token\n\tlogin(email, password) {\n\t\treturn this.fetch(`${this.domain}/user/login`, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({\n\t\t\temail,\n\t\t\tpassword\n\t\t})\n\t\t}).then(res => {\n\t\t\tthis.setToken(res.token) //arms the token\n\t\t\treturn this.fetch(`${this.domain}/user/profile`, {\n\t\t\tmethod: 'GET'\n\t\t})\n\t\t}).then(res => {\n\t\t\tthis.setProfile(res)\n\t\t\treturn Promise.resolve(res)\n\t\t})\n\t}\n\n\t// Checks if there is a saved token and it's still valid\n\tloggedIn(){\n\t\t//TODO : check validity of token ?\n\t\tconst token = this.getToken()\n\t\t//return !!token && !isTokenExpired(token) // handwaiving here\n\t\treturn !!token\n\t}\n\n\tsetProfile(profile){\n\t\t// Saves profile data to localStorage\n\t\tlocalStorage.setItem('profile', JSON.stringify(profile))\n\t}\n\n\tgetProfile(){\n\t\t// Retrieves the profile data from localStorage\n\t\tconst profile = localStorage.getItem('profile')\n\t\treturn profile ? JSON.parse(localStorage.profile) : {}\n\t}\n\n\t// Saves user token to localStorage\n\tsetToken(idToken){\n\t\tlocalStorage.setItem('token', idToken)\n\t}\n\n\t// Retrieves the user token from localStorage\n\tgetToken(){\n\t\treturn localStorage.getItem('token')\n\t}\n\n\t// Clear user token and profile data from localStorage\n\t// and logout user (from all device /all)\n\tlogout(){\n\t\tif ( this.loggedIn() ){\n\t\t\t//only proceed if the user IS logged in\n\t\t\treturn this.fetch(`${this.domain}/user/logout/all`, {\n\t\t\t\tmethod: 'POST'\n\t\t\t}).then(res => {\n\t\t\t\tconsole.log(res)\n\t\t\t\tlocalStorage.removeItem('token');\n\t\t\t\tlocalStorage.removeItem('profile');\n\t\t\t\treturn Promise.resolve(res)\n\t\t\t})\n\n\t\t}else{\n\t\t\treturn Promise.reject(res)\n\t\t}\n\t}\n\n\t// raises an error in case response status is not a success\n\t_checkStatus(response) {\n\t\tif (response.status >= 200 && response.status < 300) {\n\t\t\treturn response\n\t\t} else {\n\t\t\tvar error = new Error(response.statusText)\n\t\t\terror.response = response\n\t\t\tthrow error\n\t\t}\n\t}\n\n\t// performs api calls sending the required authentication headers\n\t// this is actually a wrapper around the 'fetch' function from\n\t// isomorphic fetch\n\tfetch(url, options){\n\t\tconst headers = {\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\n\t\tif (this.loggedIn()){\n\t\t\theaders['Authorization'] = 'Bearer ' + this.getToken()\n\t\t}\n\n\t\treturn fetch(url, {\n\t\theaders,\n\t\t...options\n\t\t})\n\t\t.then(this._checkStatus)\n\t\t.then(response => response.json())\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAOA;AACA;AAGA;AACA;AAAA;;;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AADA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AADA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAGA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AADA;AAKA;AAAA;AACA;;;;;;;;;;A","sourceRoot":""}